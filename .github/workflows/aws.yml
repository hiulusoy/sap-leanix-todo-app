name: Deploy to Amazon ECS

on:
  pull_request:
    branches:
      - 'release'
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  ECR_REGISTRY: 058632741234.dkr.ecr.eu-central-1.amazonaws.com
  ECR_REPOSITORY: general-container-repo
  ECS_SERVICE: leanix-todo-service
  ECS_CLUSTER: leanix-todo-app
  CONTAINER_NAME: leanix-todo-container
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

permissions:
  contents: read

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Server testleri çalıştır
      - name: Install server dependencies
        working-directory: ./server
        run: npm install

      - name: Run server tests
        working-directory: ./server
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: npm test

      # Client testleri çalıştır
      - name: Install client dependencies
        working-directory: ./client
        run: npm install

      - name: Run client tests
        working-directory: ./client
        run: npm run test -- --watch=false --no-progress --browsers=ChromeHeadless

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    environment: production
    needs: test  # Test job'unun başarıyla tamamlanmasını bekle
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "image=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

      - name: Generate task definition
        id: generate-task-def
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          mkdir -p .aws
          cat << EOF > .aws/task-definition.json
          {
            "family": "leanix-todo-task",
            "containerDefinitions": [
              {
                "name": "${{ env.CONTAINER_NAME }}",
                "image": "${{ steps.build-image.outputs.image }}",
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp"
                  }
                ],
                "environment": [
                  {
                    "name": "NODE_ENV",
                    "value": "production"
                  },
                  {
                    "name": "DB_HOST",
                    "value": "$DB_HOST"
                  },
                  {
                    "name": "DB_PORT",
                    "value": "$DB_PORT"
                  },
                  {
                    "name": "DB_USERNAME",
                    "value": "$DB_USERNAME"
                  },
                  {
                    "name": "DB_PASSWORD",
                    "value": "$DB_PASSWORD"
                  },
                  {
                    "name": "DB_DATABASE",
                    "value": "$DB_DATABASE"
                  },
                  {
                    "name": "OPENAI_API_KEY",
                    "value": "$OPENAI_API_KEY"
                  }
                ]
              }
            ],
            "requiresCompatibilities": [
              "FARGATE"
            ],
            "networkMode": "awsvpc",
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::058632741234:role/ecsTaskExecutionRole"
          }
          EOF

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: .aws/task-definition.json
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
